name: Deploy to EC2 and create backup

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north

      - name: Create EBS snapshot
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=ip-address,Values=${{ secrets.EC2_PUBLIC_IP }}" \
            --query "Reservations[0].Instances[0].InstanceId" \
            --output text)

          VOLUME_ID=$(aws ec2 describe-volumes \
            --filters Name=attachment.instance-id,Values=$INSTANCE_ID \
            --query "Volumes[0].VolumeId" \
            --output text)

          aws ec2 create-snapshot \
            --volume-id $VOLUME_ID \
            --description "Snapshot before deploy from GitHub Actions"

      - name: Install SSH key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > private_key.pem
          chmod 400 private_key.pem

      - name: Copy files to EC2
        run: |
          scp -i private_key.pem -o StrictHostKeyChecking=no Dockerfile index.html ubuntu@${{ secrets.EC2_PUBLIC_IP }}:/home/ubuntu/

      - name: SSH and deploy on EC2
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ubuntu@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            cd /home/ubuntu
            docker stop test-app || true
            docker rm test-app || true
            docker build -t test-app .
            docker run -d -p 80:80 --name test-app --restart unless-stopped test-app
          EOF